{"version":3,"sources":["services/persons.js","components/PersonForm.js","components/Persons.js","components/Notification.js","App.js","serviceWorker.js","index.js"],"names":["baseUrl","axios","get","then","res","data","newObject","post","id","person","put","delete","PersonForm","props","onSubmit","addPerson","value","newName","onChange","handleNameChange","newNumber","handleNumberChange","type","Persons","persons","nameFilter","deletePerson","filter","name","toLowerCase","includes","map","key","number","onClick","Notification","notification","className","message","Filter","handleNameFilterChange","App","useState","setPersons","setNewName","setNewNumber","setNameFilter","setNotification","useEffect","personService","response","newNotification","setTimeout","event","target","preventDefault","newPerson","find","p","window","confirm","returnedPerson","catch","error","updatePerson","concat","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e1bf7ed9.chunk.js","sourcesContent":["import axios from 'axios'\nconst baseUrl = '/api/persons'\n\nconst getAll = () => (\n  axios.get(baseUrl).then(res => res.data)\n)\n\nconst create = (newObject) => (\n  axios.post(baseUrl, newObject).then(res => res.data)\n)\n\nconst update = (id, person) => (\n  axios.put(`${baseUrl}/${id}`, person).then(res => res.data)\n)\n\nconst deleteById = (id) => {\n  axios.delete(`${baseUrl}/${id}`)\n}\n\nexport default {getAll, create, update, deleteById}","import React from 'react'\n\nconst PersonForm = (props) => (          \n  <form onSubmit={props.addPerson}>\n    <div>Nimi:<input value={props.newName} onChange={props.handleNameChange}/></div>\n    <div>Numero:<input value={props.newNumber} onChange={props.handleNumberChange}/></div>\n  <button type=\"submit\">lisää</button>\n  </form>)\n\n  export default PersonForm","import React from 'react'\n\nconst Persons = ({persons, nameFilter, deletePerson}) => {\n  const rows = () => persons\n    .filter(person => person.name.toLowerCase().includes(nameFilter.toLowerCase()))\n    .map(person => \n      <li key={person.name}>\n        {person.name} {person.number}\n        <button onClick={() => deletePerson(person)}>poista</button>\n      </li>)\n\n    return <ul>{rows()}</ul>\n}\n\nexport default Persons","import React from 'react'\n\nconst Notification = ({notification}) => {\n  if (notification === null) {\n    return null\n  }\n\n  return (\n    <div className={notification.type}>\n      {notification.message}\n    </div>\n  )\n}\n\nexport default Notification","import React, { useState, useEffect } from 'react'\nimport './App.css';\nimport personService from './services/persons'\nimport PersonForm from './components/PersonForm'\nimport Persons from './components/Persons'\nimport Notification from './components/Notification'\n\n\nconst Filter = ({nameFilter, handleNameFilterChange}) => \n  <div>rajaa näytettäviä<input value={nameFilter} onChange={handleNameFilterChange} /></div>\n  \n\nconst App = () => {\n  const [ persons, setPersons] = useState([]) \n  const [ newName, setNewName ] = useState('')\n  const [ newNumber, setNewNumber ] = useState('')\n  const [ nameFilter, setNameFilter ] = useState('')\n  const [ notification, setNotification] = useState(null)\n\n  useEffect(() => {\n    personService.getAll()\n    .then(response => setPersons(response))\n  }, [])\n\n  const handleNameChange = (event) => {\n    setNewName(event.target.value)\n  }\n\n  const handleNumberChange = (event) => {\n    setNewNumber(event.target.value)\n  }\n\n  const handleNameFilterChange = (event) => {\n    setNameFilter(event.target.value)\n  }\n\n  const newNotification = (message, type) => {\n    const notification = {message, type}\n    setNotification(notification)\n    setTimeout(() => {\n      setNotification(null)\n    }, 5000)\n  }\n\n  const updatePerson = (id, person) => {\n    personService.update(id, person).then(returnedPerson => {\n      setPersons(persons.map(person => person.id !== id ? person : returnedPerson))\n      newNotification(`Päivitettiin ${person.name}`, \"success\")\n    })\n    .catch(error => {\n      setPersons(persons.filter(p => p.id !== id)) //jos tapahtuu virhe, henkilö on varmaan poistettu\n      newNotification(`${person.name} oli jo poistettu`, \"error\")\n    })  \n  }\n\n  const addPerson = (event) => {\n    event.preventDefault()\n    const newPerson = {\n      name: newName,\n      number: newNumber\n    }\n\n    const person = persons.find(p => p.name === newPerson.name)\n\n    if (person) {\n      if (window.confirm(`${newName} on jo luettelossa, korvataanko vanha numero uudella?`)) {\n        updatePerson(person.id, newPerson)  \n      }   \n    } else {\n      personService.create(newPerson)\n        .then(returnedPerson => {\n          setPersons(persons.concat(returnedPerson))\n          newNotification(`Lisättiin ${newPerson.name}`, \"success\")})\n        .catch(error => {\n          newNotification(error.response.data.error, \"error\")\n        })\n    }\n\n    setNewName('')\n    setNewNumber('')\n  }\n\n  const deletePerson = (person) => {\n    if (window.confirm(`Poistetaanko ${person.name}?`)) {\n      personService.deleteById(person.id)\n      setPersons(persons.filter(p => p.id !== person.id))\n      newNotification(`Poistettiin ${person.name}`, \"success\")\n    }\n  }\n\n  return (\n    <div>\n      <h2>Puhelinluettelo</h2>\n      <Notification notification={notification} />\n      <Filter nameFilter={nameFilter} handleNameFilterChange={handleNameFilterChange} />\n\n      <h3>Lisää uusi</h3>\n\n      <PersonForm addPerson={addPerson} newName={newName} handleNameChange={handleNameChange} \n                  newNumber={newNumber} handleNumberChange={handleNumberChange}/>\n\n      <h3>Numerot</h3>\n\n      <Persons persons={persons} nameFilter={nameFilter} deletePerson={deletePerson}/>\n    </div>\n  )\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}